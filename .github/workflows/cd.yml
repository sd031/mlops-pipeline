name: MLOps Pipeline CD

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_run:
    workflows: ["MLOps Pipeline CI"]
    types:
      - completed

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event.workflow_run.conclusion == 'success'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Docker images
      run: |
        docker compose build
        docker tag mlops_project-api ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:staging
        docker tag mlops_project-training ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-training:staging
        docker tag mlops_project-monitoring ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-monitoring:staging
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:staging
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-training:staging
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-monitoring:staging
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # e.g., kubectl apply, docker compose up on staging server, etc.

  deploy-production:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    needs: deploy-staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract version
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Build and push production images
      run: |
        docker compose build
        docker tag mlops_project-api ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:${{ steps.version.outputs.VERSION }}
        docker tag mlops_project-training ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-training:${{ steps.version.outputs.VERSION }}
        docker tag mlops_project-monitoring ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-monitoring:${{ steps.version.outputs.VERSION }}
        docker tag mlops_project-api ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:latest
        docker tag mlops_project-training ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-training:latest
        docker tag mlops_project-monitoring ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-monitoring:latest
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:${{ steps.version.outputs.VERSION }}
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-training:${{ steps.version.outputs.VERSION }}
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-monitoring:${{ steps.version.outputs.VERSION }}
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:latest
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-training:latest
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-monitoring:latest
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # e.g., kubectl apply, helm upgrade, etc.
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        release_name: Release ${{ steps.version.outputs.VERSION }}
        body: |
          MLOps Pipeline Release ${{ steps.version.outputs.VERSION }}
          
          ## Changes
          - Automated deployment from CI/CD pipeline
          - Docker images available at:
            - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:${{ steps.version.outputs.VERSION }}`
            - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-training:${{ steps.version.outputs.VERSION }}`
            - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-monitoring:${{ steps.version.outputs.VERSION }}`
        draft: false
        prerelease: false
