name: MLOps Pipeline CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Setup project
      run: make setup
    
    - name: Run unit tests
      run: make test-unit
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  data-pipeline:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Setup project
      run: make setup
    
    - name: Generate data
      run: make generate-data
    
    - name: Process data
      run: |
        # Copy raw data to processed directory with expected filename
        mkdir -p data/processed
        cp data/raw/customer_churn.csv data/processed/validated_data.csv
    
    - name: Upload data artifacts
      uses: actions/upload-artifact@v4
      with:
        name: generated-data
        path: data/

  model-training:
    runs-on: ubuntu-latest
    needs: data-pipeline
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Setup project
      run: make setup
    
    - name: Download data artifacts
      uses: actions/download-artifact@v4
      with:
        name: generated-data
        path: data/
    
    - name: Process data for training
      run: |
        # Ensure processed data exists with expected filename
        mkdir -p data/processed
        cp data/raw/customer_churn.csv data/processed/validated_data.csv
    
    - name: Initialize database
      run: |
        # Create database tables if they don't exist
        ./venv/bin/python -c "
        from src.utils.database import DatabaseManager
        db = DatabaseManager()
        db.init_db()
        print('Database tables initialized')
        "
    
    - name: Train model
      run: make train-model
    
    - name: Evaluate model
      run: make evaluate-model
    
    - name: Upload model artifacts
      uses: actions/upload-artifact@v4
      with:
        name: trained-model
        path: |
          models/
          mlruns/

  docker-build:
    runs-on: ubuntu-latest
    needs: [test, model-training]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    # - name: Login to Docker Hub
    #   if: github.event_name != 'pull_request'
    #   uses: docker/login-action@v3
    #   with:
    #     username: ${{ secrets.DOCKER_USERNAME }}
    #     password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Download model artifacts
      uses: actions/download-artifact@v4
      with:
        name: trained-model
        path: .
    
    - name: Build and test Docker images
      run: |
        make docker-build
        make docker-up
        sleep 30
        docker compose ps
        make docker-down
    
    # - name: Push Docker images
    #   if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    #   run: |
    #     docker tag mlops_project-api ${{ secrets.DOCKER_USERNAME }}/mlops-api:latest
    #     docker tag mlops_project-training ${{ secrets.DOCKER_USERNAME }}/mlops-training:latest
    #     docker tag mlops_project-monitoring ${{ secrets.DOCKER_USERNAME }}/mlops-monitoring:latest
    #     docker push ${{ secrets.DOCKER_USERNAME }}/mlops-api:latest
    #     docker push ${{ secrets.DOCKER_USERNAME }}/mlops-training:latest
    #     docker push ${{ secrets.DOCKER_USERNAME }}/mlops-monitoring:latest
