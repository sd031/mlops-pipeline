name: MLOps Pipeline CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
    
    - name: Create directories
      run: |
        mkdir -p data/raw data/processed data/features data/external
        mkdir -p models/artifacts models/experiments models/registry
        mkdir -p logs metrics
    
    - name: Run linting
      run: |
        pip install flake8 black isort
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check src/
        isort --check-only src/
    
    - name: Run unit tests
      run: |
        python -m pytest tests/unit/ -v --cov=src --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  data-pipeline:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
    
    - name: Create directories
      run: |
        mkdir -p data/raw data/processed data/features data/external
        mkdir -p models/artifacts models/experiments models/registry
        mkdir -p logs metrics
    
    - name: Generate data
      run: |
        python scripts/generate_data.py
    
    - name: Upload data artifacts
      uses: actions/upload-artifact@v4
      with:
        name: generated-data
        path: data/

  model-training:
    runs-on: ubuntu-latest
    needs: data-pipeline
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
    
    - name: Create directories
      run: |
        mkdir -p data/raw data/processed data/features data/external
        mkdir -p models/artifacts models/experiments models/registry
        mkdir -p logs metrics
    
    - name: Download data artifacts
      uses: actions/download-artifact@v3
      with:
        name: generated-data
        path: data/
    
    - name: Train model
      run: |
        python -m src.models.train --config config/model_config.yaml
    
    - name: Evaluate model
      run: |
        python -m src.models.evaluate
    
    - name: Upload model artifacts
      uses: actions/upload-artifact@v4
      with:
        name: trained-model
        path: |
          models/
          mlruns/

  docker-build:
    runs-on: ubuntu-latest
    needs: [test, model-training]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Download model artifacts
      uses: actions/download-artifact@v3
      with:
        name: trained-model
        path: .
    
    - name: Build and test Docker images
      run: |
        docker compose build
        docker compose up -d
        sleep 30
        docker compose ps
        docker compose down
    
    - name: Push Docker images
      if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
      run: |
        docker tag mlops_project-api ${{ secrets.DOCKER_USERNAME }}/mlops-api:latest
        docker tag mlops_project-training ${{ secrets.DOCKER_USERNAME }}/mlops-training:latest
        docker tag mlops_project-monitoring ${{ secrets.DOCKER_USERNAME }}/mlops-monitoring:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/mlops-api:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/mlops-training:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/mlops-monitoring:latest
